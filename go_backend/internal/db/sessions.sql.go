// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package db

import (
	"context"
	"database/sql"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    id,
    parent_session_id,
    title,
    prompt_tokens,
    completion_tokens,
    cost,
    summary_message_id,
    working_directory,
    updated_at,
    created_at
) VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    null,
    ?,
    strftime('%s', 'now'),
    strftime('%s', 'now')
) RETURNING 
    id, 
    parent_session_id,
    title, 
    prompt_tokens, 
    completion_tokens, 
    cost, 
    created_at, 
    updated_at,
    summary_message_id,
    working_directory
`

type CreateSessionParams struct {
	ID               string         `json:"id"`
	ParentSessionID  sql.NullString `json:"parent_session_id"`
	Title            string         `json:"title"`
	PromptTokens     int64          `json:"prompt_tokens"`
	CompletionTokens int64          `json:"completion_tokens"`
	Cost             float64        `json:"cost"`
	WorkingDirectory sql.NullString `json:"working_directory"`
}

type CreateSessionRow struct {
	ID               string         `json:"id"`
	ParentSessionID  sql.NullString `json:"parent_session_id"`
	Title            string         `json:"title"`
	PromptTokens     int64          `json:"prompt_tokens"`
	CompletionTokens int64          `json:"completion_tokens"`
	Cost             float64        `json:"cost"`
	CreatedAt        int64          `json:"created_at"`
	UpdatedAt        int64          `json:"updated_at"`
	SummaryMessageID sql.NullString `json:"summary_message_id"`
	WorkingDirectory sql.NullString `json:"working_directory"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (CreateSessionRow, error) {
	row := q.queryRow(ctx, q.createSessionStmt, createSession,
		arg.ID,
		arg.ParentSessionID,
		arg.Title,
		arg.PromptTokens,
		arg.CompletionTokens,
		arg.Cost,
		arg.WorkingDirectory,
	)
	var i CreateSessionRow
	err := row.Scan(
		&i.ID,
		&i.ParentSessionID,
		&i.Title,
		&i.PromptTokens,
		&i.CompletionTokens,
		&i.Cost,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SummaryMessageID,
		&i.WorkingDirectory,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id = ?
`

func (q *Queries) DeleteSession(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteSessionStmt, deleteSession, id)
	return err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT 
    s.id, 
    s.parent_session_id,
    s.title, 
    s.prompt_tokens, 
    s.completion_tokens, 
    s.cost, 
    s.created_at, 
    s.updated_at,
    s.summary_message_id,
    s.working_directory,
    COALESCE(counts.user_message_count, 0) as user_message_count,
    COALESCE(counts.assistant_message_count, 0) as assistant_message_count, 
    COALESCE(counts.tool_call_count, 0) as tool_call_count
FROM sessions s
LEFT JOIN (
    SELECT session_id,
           COUNT(CASE WHEN role = 'user' THEN 1 END) as user_message_count,
           COUNT(CASE WHEN role = 'assistant' THEN 1 END) as assistant_message_count,
           COUNT(CASE WHEN role = 'tool' THEN 1 END) as tool_call_count
    FROM messages GROUP BY session_id
) counts ON s.id = counts.session_id
WHERE s.id = ? LIMIT 1
`

type GetSessionByIDRow struct {
	ID                    string         `json:"id"`
	ParentSessionID       sql.NullString `json:"parent_session_id"`
	Title                 string         `json:"title"`
	PromptTokens          int64          `json:"prompt_tokens"`
	CompletionTokens      int64          `json:"completion_tokens"`
	Cost                  float64        `json:"cost"`
	CreatedAt             int64          `json:"created_at"`
	UpdatedAt             int64          `json:"updated_at"`
	SummaryMessageID      sql.NullString `json:"summary_message_id"`
	WorkingDirectory      sql.NullString `json:"working_directory"`
	UserMessageCount      int64          `json:"user_message_count"`
	AssistantMessageCount int64          `json:"assistant_message_count"`
	ToolCallCount         int64          `json:"tool_call_count"`
}

func (q *Queries) GetSessionByID(ctx context.Context, id string) (GetSessionByIDRow, error) {
	row := q.queryRow(ctx, q.getSessionByIDStmt, getSessionByID, id)
	var i GetSessionByIDRow
	err := row.Scan(
		&i.ID,
		&i.ParentSessionID,
		&i.Title,
		&i.PromptTokens,
		&i.CompletionTokens,
		&i.Cost,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SummaryMessageID,
		&i.WorkingDirectory,
		&i.UserMessageCount,
		&i.AssistantMessageCount,
		&i.ToolCallCount,
	)
	return i, err
}

const listSessionsMetadata = `-- name: ListSessionsMetadata :many
SELECT 
    s.id, 
    s.parent_session_id,
    s.title, 
    s.prompt_tokens, 
    s.completion_tokens, 
    s.cost, 
    s.created_at, 
    s.updated_at,
    s.summary_message_id,
    s.working_directory,
    COALESCE(counts.user_message_count, 0) as user_message_count,
    COALESCE(counts.assistant_message_count, 0) as assistant_message_count, 
    COALESCE(counts.tool_call_count, 0) as tool_call_count
FROM sessions s
LEFT JOIN (
    SELECT session_id,
           COUNT(CASE WHEN role = 'user' THEN 1 END) as user_message_count,
           COUNT(CASE WHEN role = 'assistant' THEN 1 END) as assistant_message_count,
           COUNT(CASE WHEN role = 'tool' THEN 1 END) as tool_call_count
    FROM messages GROUP BY session_id
) counts ON s.id = counts.session_id
ORDER BY s.created_at DESC
`

type ListSessionsMetadataRow struct {
	ID                    string         `json:"id"`
	ParentSessionID       sql.NullString `json:"parent_session_id"`
	Title                 string         `json:"title"`
	PromptTokens          int64          `json:"prompt_tokens"`
	CompletionTokens      int64          `json:"completion_tokens"`
	Cost                  float64        `json:"cost"`
	CreatedAt             int64          `json:"created_at"`
	UpdatedAt             int64          `json:"updated_at"`
	SummaryMessageID      sql.NullString `json:"summary_message_id"`
	WorkingDirectory      sql.NullString `json:"working_directory"`
	UserMessageCount      int64          `json:"user_message_count"`
	AssistantMessageCount int64          `json:"assistant_message_count"`
	ToolCallCount         int64          `json:"tool_call_count"`
}

func (q *Queries) ListSessionsMetadata(ctx context.Context) ([]ListSessionsMetadataRow, error) {
	rows, err := q.query(ctx, q.listSessionsMetadataStmt, listSessionsMetadata)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSessionsMetadataRow{}
	for rows.Next() {
		var i ListSessionsMetadataRow
		if err := rows.Scan(
			&i.ID,
			&i.ParentSessionID,
			&i.Title,
			&i.PromptTokens,
			&i.CompletionTokens,
			&i.Cost,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SummaryMessageID,
			&i.WorkingDirectory,
			&i.UserMessageCount,
			&i.AssistantMessageCount,
			&i.ToolCallCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSessionsWithContent = `-- name: ListSessionsWithContent :many
SELECT 
    s.id, 
    s.parent_session_id,
    s.title, 
    s.prompt_tokens, 
    s.completion_tokens, 
    s.cost, 
    s.created_at, 
    s.updated_at,
    s.summary_message_id,
    s.working_directory,
    COALESCE(first_msg.parts, '') as first_user_message,
    COALESCE(counts.user_message_count, 0) as user_message_count,
    COALESCE(counts.assistant_message_count, 0) as assistant_message_count, 
    COALESCE(counts.tool_call_count, 0) as tool_call_count
FROM sessions s
LEFT JOIN (
    SELECT 
        session_id,
        parts,
        ROW_NUMBER() OVER (PARTITION BY session_id ORDER BY created_at ASC) as rn
    FROM messages 
    WHERE role = 'user'
) first_msg ON s.id = first_msg.session_id AND first_msg.rn = 1
LEFT JOIN (
    SELECT session_id,
           COUNT(CASE WHEN role = 'user' THEN 1 END) as user_message_count,
           COUNT(CASE WHEN role = 'assistant' THEN 1 END) as assistant_message_count,
           COUNT(CASE WHEN role = 'tool' THEN 1 END) as tool_call_count
    FROM messages GROUP BY session_id
) counts ON s.id = counts.session_id
ORDER BY s.created_at DESC
`

type ListSessionsWithContentRow struct {
	ID                    string         `json:"id"`
	ParentSessionID       sql.NullString `json:"parent_session_id"`
	Title                 string         `json:"title"`
	PromptTokens          int64          `json:"prompt_tokens"`
	CompletionTokens      int64          `json:"completion_tokens"`
	Cost                  float64        `json:"cost"`
	CreatedAt             int64          `json:"created_at"`
	UpdatedAt             int64          `json:"updated_at"`
	SummaryMessageID      sql.NullString `json:"summary_message_id"`
	WorkingDirectory      sql.NullString `json:"working_directory"`
	FirstUserMessage      string         `json:"first_user_message"`
	UserMessageCount      int64          `json:"user_message_count"`
	AssistantMessageCount int64          `json:"assistant_message_count"`
	ToolCallCount         int64          `json:"tool_call_count"`
}

func (q *Queries) ListSessionsWithContent(ctx context.Context) ([]ListSessionsWithContentRow, error) {
	rows, err := q.query(ctx, q.listSessionsWithContentStmt, listSessionsWithContent)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSessionsWithContentRow{}
	for rows.Next() {
		var i ListSessionsWithContentRow
		if err := rows.Scan(
			&i.ID,
			&i.ParentSessionID,
			&i.Title,
			&i.PromptTokens,
			&i.CompletionTokens,
			&i.Cost,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SummaryMessageID,
			&i.WorkingDirectory,
			&i.FirstUserMessage,
			&i.UserMessageCount,
			&i.AssistantMessageCount,
			&i.ToolCallCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSession = `-- name: UpdateSession :one
UPDATE sessions
SET
    title = ?,
    prompt_tokens = ?,
    completion_tokens = ?,
    summary_message_id = ?,
    cost = ?,
    updated_at = strftime('%s', 'now')
WHERE id = ?
RETURNING 
    id, 
    parent_session_id,
    title, 
    prompt_tokens, 
    completion_tokens, 
    cost, 
    created_at, 
    updated_at,
    summary_message_id,
    working_directory
`

type UpdateSessionParams struct {
	Title            string         `json:"title"`
	PromptTokens     int64          `json:"prompt_tokens"`
	CompletionTokens int64          `json:"completion_tokens"`
	SummaryMessageID sql.NullString `json:"summary_message_id"`
	Cost             float64        `json:"cost"`
	ID               string         `json:"id"`
}

type UpdateSessionRow struct {
	ID               string         `json:"id"`
	ParentSessionID  sql.NullString `json:"parent_session_id"`
	Title            string         `json:"title"`
	PromptTokens     int64          `json:"prompt_tokens"`
	CompletionTokens int64          `json:"completion_tokens"`
	Cost             float64        `json:"cost"`
	CreatedAt        int64          `json:"created_at"`
	UpdatedAt        int64          `json:"updated_at"`
	SummaryMessageID sql.NullString `json:"summary_message_id"`
	WorkingDirectory sql.NullString `json:"working_directory"`
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) (UpdateSessionRow, error) {
	row := q.queryRow(ctx, q.updateSessionStmt, updateSession,
		arg.Title,
		arg.PromptTokens,
		arg.CompletionTokens,
		arg.SummaryMessageID,
		arg.Cost,
		arg.ID,
	)
	var i UpdateSessionRow
	err := row.Scan(
		&i.ID,
		&i.ParentSessionID,
		&i.Title,
		&i.PromptTokens,
		&i.CompletionTokens,
		&i.Cost,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SummaryMessageID,
		&i.WorkingDirectory,
	)
	return i, err
}
